// we used moongoose
import mongoose, { Schema, model, models } from "mongoose";
import bcrypt from "bcryptjs";

export interface IUser {
    email: string;
    password: string;
    _id?: mongoose.Types.ObjectId; // id is auto matic generated by moogose and the ? symbol kabhi id generated hogi ya kabhi nhi hogi to
    createAT?: Date;
    updatedAT?: Date;
}

const userSchema = new Schema<IUser>( // <> is the genrics which help to define the type of my schema as we define in upper code
    {
        email: { type: String, required: true, unique: true },
        password: { type: String, required: true },
    },
    {
        timestamps: true,
    }
);

// Pre-save hook to hash password
userSchema.pre("save", async function (next) {
    // next is the flag if we could done this or if not passed to next
    // 'this' refers to the document being saved
    if (this.isModified("password")) {
        this.password = await bcrypt.hash(this.password, 10);
    }
    next(); // call next to continue
});

// if model is made then used if not then create with my designed model type
const User = models?.User || model<IUser>("User", userSchema);
export default User;
